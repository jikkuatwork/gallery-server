{"version":3,"sources":["components/Gallery.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Gallery","useState","showNav","setShowNav","showThumbnails","setShowThumbnails","images","setImages","isFullscreen","setIsFullscreen","galleryRef","useRef","useEffect","a","window","fetch","then","resp","json","srcs","console","error","map","src","original","thumbnail","fetchImages","ref","items","showBullets","showIndex","slideOnThumbnailOver","useBrowserFullscreen","onScreenChange","fullscreenElement","onClick","ismimicDbClick","current","exitFullScreen","fullScreen","key","now","Date","prevClickTimestamp","prevClickTimestamps","gap","log","isdbClick","App","className","logo","alt","href","target","rel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"yVAIe,SAASA,IAAW,IAAD,EACFC,oBAAS,GADP,mBACzBC,EADyB,KAChBC,EADgB,OAEYF,oBAAS,GAFrB,mBAEzBG,EAFyB,KAETC,EAFS,OAGJJ,mBAAS,IAHL,mBAGzBK,EAHyB,KAGjBC,EAHiB,OAIQN,oBAAS,GAJjB,mBAIzBO,EAJyB,KAIXC,EAJW,KAK1BC,EAAaC,iBAAO,MAE1BC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,+EAIiBC,OAAOC,MAAM,oCACvBC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UALzB,OAIIC,EAJJ,+EAQWC,QAAQC,MAAM,cAAd,OARX,OAWEF,GAAQZ,EAAUY,EAAKG,KAAI,SAAAC,GAAG,MAAK,CAAEC,SAAUD,EAAKE,UAAWF,OAXjE,0DADc,uBAAC,WAAD,wBAedG,KACC,IAyBH,OACE,kBAAC,IAAD,CACEC,IAAKjB,EACLkB,MAAOtB,EACPuB,aAAa,EACbC,WAAW,EACXC,sBAAsB,EACtBC,sBAAsB,EACtB9B,QAASA,EACTE,eAAgBA,EAChB6B,eAhCmB,SAACC,GAEtB,IAAM1B,IAAiB0B,EAEvBzB,EAAgBD,GAEZA,GACFL,GAAW,GACXE,GAAkB,KAElBF,GAAW,GACXE,GAAkB,KAsBlB8B,QAlBY,WACVC,EAAe,kBAEjB5B,EAAeE,EAAW2B,QAAQC,iBAAmB5B,EAAW2B,QAAQE,iBAoB9E,SAASH,EAAeI,GAEtB,IAAMC,EAAMC,KAAKD,MAEXE,EAAqBP,EAAeQ,oBAAoBJ,IAAQ,EAChEK,EAAMJ,EAAME,EAClBvB,QAAQ0B,IAAI,CAAEL,MAAKE,qBAAoBE,QAEvC,IAAME,EAAYF,GAAO,KAAOA,GAAO,IAKvC,OAFAT,EAAeQ,oBAAoBJ,GAAOC,EAEnCM,EAGTX,EAAeQ,oBAAsB,GCtDtBI,MAzBf,WACE,OACE,yBAAKC,UAAU,OACb,0BAAMA,UAAU,mBACd,kBAAC,EAAD,OAGF,4BAAQA,UAAU,cAChB,yBAAK1B,IAAK2B,IAAMD,UAAU,WAAWE,IAAI,SACzC,uBAAGF,UAAU,QAAb,QACO,4CADP,wBAGA,uBACEA,UAAU,WACVG,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCLYC,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.6bc150b9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ImageGallery from 'react-image-gallery';\nimport './Gallery.css';\n\nexport default function Gallery() {\n  const [showNav, setShowNav] = useState(true);\n  const [showThumbnails, setShowThumbnails] = useState(true);\n  const [images, setImages] = useState([]);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const galleryRef = useRef(null);\n\n  useEffect(() => {\n    async function fetchImages() {\n      let srcs;\n\n      try {\n        srcs = await window.fetch('http://localhost:7001/api/images')\n          .then(resp => resp.json())\n\n      } catch (error) {\n        return console.error('fetchImages', error)\n      }\n\n      srcs && setImages(srcs.map(src => ({ original: src, thumbnail: src })));\n    }\n\n    fetchImages();\n  }, [])\n\n  // let isFullscreen = false;\n  const onScreenChange = (fullscreenElement) => {\n    // console.log('fullscreenElement:', fullscreenElement);\n    const isFullscreen = !!fullscreenElement;\n    // console.log('isFullscreen onScreenChange:', isFullscreen);\n    setIsFullscreen(isFullscreen);\n\n    if (isFullscreen) {\n      setShowNav(false);\n      setShowThumbnails(false);\n    } else {\n      setShowNav(true);\n      setShowThumbnails(true);\n    }\n  };\n\n  const onClick = () => {\n    if (ismimicDbClick('ImageGallery')) {\n      // console.log('isFullscreen onClick:', isFullscreen);\n      isFullscreen ? galleryRef.current.exitFullScreen() : galleryRef.current.fullScreen();\n    }\n  };\n\n  return (\n    <ImageGallery\n      ref={galleryRef}\n      items={images}\n      showBullets={true}\n      showIndex={true}\n      slideOnThumbnailOver={false}\n      useBrowserFullscreen={true}\n      showNav={showNav}\n      showThumbnails={showThumbnails}\n      onScreenChange={onScreenChange}\n      onClick={onClick}\n    />\n  );\n}\n\nfunction ismimicDbClick(key) {\n  /** 两次点击间隔时间。单位 ms */\n  const now = Date.now();\n\n  const prevClickTimestamp = ismimicDbClick.prevClickTimestamps[key] || 0;\n  const gap = now - prevClickTimestamp;\n  console.log({ now, prevClickTimestamp, gap });\n\n  const isdbClick = gap >= 100 && gap <= 500;\n\n  // save previous click timestamp\n  ismimicDbClick.prevClickTimestamps[key] = now;\n\n  return isdbClick;\n}\n\nismimicDbClick.prevClickTimestamps = {};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Gallery from './components/Gallery'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"Gallery-wrapper\">\n        <Gallery></Gallery>\n      </main>\n\n      <footer className=\"App-footer\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"tips\">\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}